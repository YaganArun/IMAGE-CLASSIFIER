# -*- coding: utf-8 -*-
"""model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sYW9hbjE5L4GVp77CGfYJ5jkzh4RBFvZ
"""

from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D
from tensorflow.keras.layers import Activation, Dropout, Flatten, Dense
from tensorflow import keras



model = Sequential([
    Conv2D(32, (3, 3), activation='relu',input_shape =(150,150,3)),
    MaxPooling2D(pool_size=(3,3) , padding='same'),
    Conv2D(32, (3, 3), activation='relu' , padding='same'),
    MaxPooling2D(pool_size=(3,3) , padding='same'),
    Conv2D(64, (3, 3), activation='relu' , padding='same'),
    MaxPooling2D(pool_size=(3,3) , padding='same')
])

model.summary()

model.add(Flatten())  # this converts our 3D feature maps to 1D feature vectors
model.add(Dense(64, activation='relu'))
model.add(Dropout(0.5))
model.add(Dense(1, activation='sigmoid')) #since a binary classifivation sigmoid is used (0 or 1)

train_datagen = ImageDataGenerator(
        rescale=1./255,
        shear_range=0.2,
        zoom_range=0.2,
        horizontal_flip=True)
test_datagen = ImageDataGenerator(rescale=1./255)

train_generator = train_datagen.flow_from_directory(
        'data/train',  # this is the target directory
        target_size=(150 , 150),  # all images will be resized to 150x150
        batch_size=5,
        class_mode='binary')

validation_generator = test_datagen.flow_from_directory(
        'data/validation',
        target_size=(150 , 150),
        batch_size=5,
        class_mode='binary')

model.compile(optimizer='sgd',
              loss='binary_crossentropy',
              metrics=['accuracy'])

history = model.fit(train_generator, 
          epochs=30, 
          steps_per_epoch=len(train_generator) // 5,
          validation_data=validation_generator,
          validation_steps=len(validation_generator) // 5)

import numpy as np
from keras.preprocessing import image
import matplotlib.pyplot as plt

img_width, img_height = 150 , 150
bike_img = image.load_img('b2.jpg', target_size = (img_width, img_height))
dis = bike_img
bike_img = image.img_to_array(bike_img)
bike_img = np.expand_dims(bike_img, axis = 0)

plt.imshow(dis)
model.predict(bike_img)

img_width, img_height = 150 , 150
car_img = image.load_img('c1.jpg', target_size = (img_width, img_height))
dis = car_img
car_img = image.img_to_array(car_img)
car_img = np.expand_dims(car_img, axis = 0)

plt.imshow(dis)
model.predict(car_img)

plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title('model accuracy')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend(['train', 'valid'], loc='lower right')
plt.show()

plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('model loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train', 'valid'], loc='upper right')
plt.show()

